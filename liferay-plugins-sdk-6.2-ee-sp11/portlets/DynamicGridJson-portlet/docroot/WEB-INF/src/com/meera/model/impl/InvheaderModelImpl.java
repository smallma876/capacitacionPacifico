/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.meera.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.meera.model.Invheader;
import com.meera.model.InvheaderModel;
import com.meera.model.InvheaderSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Invheader service. Represents a row in the &quot;jqgrid_Invheader&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.meera.model.InvheaderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InvheaderImpl}.
 * </p>
 *
 * @author meera
 * @see InvheaderImpl
 * @see com.meera.model.Invheader
 * @see com.meera.model.InvheaderModel
 * @generated
 */
@JSON(strict = true)
public class InvheaderModelImpl extends BaseModelImpl<Invheader>
	implements InvheaderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a invheader model instance should use the {@link com.meera.model.Invheader} interface instead.
	 */
	public static final String TABLE_NAME = "jqgrid_Invheader";
	public static final Object[][] TABLE_COLUMNS = {
			{ "invId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "ammount", Types.BIGINT },
			{ "tax", Types.BIGINT },
			{ "total", Types.BIGINT },
			{ "notes", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table jqgrid_Invheader (invId LONG not null primary key,name VARCHAR(75) null,ammount LONG,tax LONG,total LONG,notes VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table jqgrid_Invheader";
	public static final String ORDER_BY_JPQL = " ORDER BY invheader.invId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY jqgrid_Invheader.invId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.meera.model.Invheader"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.meera.model.Invheader"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Invheader toModel(InvheaderSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Invheader model = new InvheaderImpl();

		model.setInvId(soapModel.getInvId());
		model.setName(soapModel.getName());
		model.setAmmount(soapModel.getAmmount());
		model.setTax(soapModel.getTax());
		model.setTotal(soapModel.getTotal());
		model.setNotes(soapModel.getNotes());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Invheader> toModels(InvheaderSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Invheader> models = new ArrayList<Invheader>(soapModels.length);

		for (InvheaderSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.meera.model.Invheader"));

	public InvheaderModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _invId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setInvId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _invId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Invheader.class;
	}

	@Override
	public String getModelClassName() {
		return Invheader.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("invId", getInvId());
		attributes.put("name", getName());
		attributes.put("ammount", getAmmount());
		attributes.put("tax", getTax());
		attributes.put("total", getTotal());
		attributes.put("notes", getNotes());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long invId = (Long)attributes.get("invId");

		if (invId != null) {
			setInvId(invId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Long ammount = (Long)attributes.get("ammount");

		if (ammount != null) {
			setAmmount(ammount);
		}

		Long tax = (Long)attributes.get("tax");

		if (tax != null) {
			setTax(tax);
		}

		Long total = (Long)attributes.get("total");

		if (total != null) {
			setTotal(total);
		}

		String notes = (String)attributes.get("notes");

		if (notes != null) {
			setNotes(notes);
		}
	}

	@JSON
	@Override
	public long getInvId() {
		return _invId;
	}

	@Override
	public void setInvId(long invId) {
		_invId = invId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public long getAmmount() {
		return _ammount;
	}

	@Override
	public void setAmmount(long ammount) {
		_ammount = ammount;
	}

	@JSON
	@Override
	public long getTax() {
		return _tax;
	}

	@Override
	public void setTax(long tax) {
		_tax = tax;
	}

	@JSON
	@Override
	public long getTotal() {
		return _total;
	}

	@Override
	public void setTotal(long total) {
		_total = total;
	}

	@JSON
	@Override
	public String getNotes() {
		if (_notes == null) {
			return StringPool.BLANK;
		}
		else {
			return _notes;
		}
	}

	@Override
	public void setNotes(String notes) {
		_notes = notes;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Invheader.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Invheader toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Invheader)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InvheaderImpl invheaderImpl = new InvheaderImpl();

		invheaderImpl.setInvId(getInvId());
		invheaderImpl.setName(getName());
		invheaderImpl.setAmmount(getAmmount());
		invheaderImpl.setTax(getTax());
		invheaderImpl.setTotal(getTotal());
		invheaderImpl.setNotes(getNotes());

		invheaderImpl.resetOriginalValues();

		return invheaderImpl;
	}

	@Override
	public int compareTo(Invheader invheader) {
		long primaryKey = invheader.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Invheader)) {
			return false;
		}

		Invheader invheader = (Invheader)obj;

		long primaryKey = invheader.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Invheader> toCacheModel() {
		InvheaderCacheModel invheaderCacheModel = new InvheaderCacheModel();

		invheaderCacheModel.invId = getInvId();

		invheaderCacheModel.name = getName();

		String name = invheaderCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			invheaderCacheModel.name = null;
		}

		invheaderCacheModel.ammount = getAmmount();

		invheaderCacheModel.tax = getTax();

		invheaderCacheModel.total = getTotal();

		invheaderCacheModel.notes = getNotes();

		String notes = invheaderCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			invheaderCacheModel.notes = null;
		}

		return invheaderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{invId=");
		sb.append(getInvId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", ammount=");
		sb.append(getAmmount());
		sb.append(", tax=");
		sb.append(getTax());
		sb.append(", total=");
		sb.append(getTotal());
		sb.append(", notes=");
		sb.append(getNotes());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.meera.model.Invheader");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>invId</column-name><column-value><![CDATA[");
		sb.append(getInvId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ammount</column-name><column-value><![CDATA[");
		sb.append(getAmmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tax</column-name><column-value><![CDATA[");
		sb.append(getTax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>total</column-name><column-value><![CDATA[");
		sb.append(getTotal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notes</column-name><column-value><![CDATA[");
		sb.append(getNotes());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Invheader.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Invheader.class
		};
	private long _invId;
	private String _name;
	private long _ammount;
	private long _tax;
	private long _total;
	private String _notes;
	private Invheader _escapedModel;
}